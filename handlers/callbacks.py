from aiogram import Router
from aiogram.types import CallbackQuery
from database import get_user_profile, add_user
from keyboards.profile import get_back_keyboard, get_profile_keyboard, get_stats_keyboard
import sqlite3
import json
import random

router = Router()

@router.callback_query(lambda c: c.data == "skills")
async def skills_callback(callback: CallbackQuery):
    user = get_user_profile(callback.from_user.id)
    skills_raw = user[9]
    skills = json.loads(skills_raw) if skills_raw else {}
    text = "üìò –¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏:\n" + "\n".join(
        [f"‚Äî {name}: {level} —É—Ä." for name, level in skills.items()]
    ) if skills else "üìú –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤."

    await callback.message.edit_text(text, reply_markup=get_back_keyboard())

@router.callback_query(lambda c: c.data == "stats")
async def stats_callback(callback: CallbackQuery):
    user = get_user_profile(callback.from_user.id)
    text = (
        f"üß¨ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–°–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤: {user[10]}):\n"
        f"‚Äî ü™ì –°–∏–ª–∞: {user[2]}\n"
        f"‚Äî ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å: {user[3]}\n"
        f"‚Äî üõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[4]}\n"
        f"‚Äî üëÅÔ∏è –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ: {user[5]}\n"
        f"‚Äî üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[6]}\n"
        f"‚Äî üé≠ –•–∞—Ä–∏–∑–º–∞: {user[7]}\n"
        f"‚Äî üî• –°–∏–ª–∞ –í–æ–ª–∏: {user[8]}"
    )
    await callback.message.edit_text(text, reply_markup=get_stats_keyboard(user[10]))

@router.callback_query(lambda c: c.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    from keyboards.profile import get_profile_keyboard
    user = get_user_profile(callback.from_user.id)
    text = (
        f"üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{callback.from_user.username or '–ì–µ—Ä–æ–π'}*, –≤ —Ö—Ä–æ–Ω–∏–∫–∏ –†–µ–∞–ª—å–Ω–æ–≥–æ –ú–∏—Ä–∞!\n\n"
        f"üßæ –ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Äî ü™ì –°–∏–ª–∞: {user[2]}\n"
        f"‚Äî ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å: {user[3]}\n"
        f"‚Äî üõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[4]}\n"
        f"‚Äî üëÅÔ∏è –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ: {user[5]}\n"
        f"‚Äî üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[6]}\n"
        f"‚Äî üé≠ –•–∞—Ä–∏–∑–º–∞: {user[7]}\n"
        f"‚Äî üî• –°–∏–ª–∞ –í–æ–ª–∏: {user[8]}"
    )
    await callback.message.edit_text(text, reply_markup=get_profile_keyboard(), parse_mode="Markdown")

@router.callback_query(lambda c: c.data.startswith("inc_"))
async def increment_stat(callback: CallbackQuery):
    stat_map = {
        "inc_strength": "strength",
        "inc_agility": "agility",
        "inc_endurance": "endurance",
        "inc_perception": "perception",
        "inc_intelligence": "intelligence",
        "inc_charisma": "charisma",
        "inc_willpower": "willpower"
    }

    stat = stat_map.get(callback.data)
    user_id = callback.from_user.id

    if not stat:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞.")
        return

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    cursor.execute(f"SELECT {stat}, free_points FROM users WHERE user_id = ?", (user_id,))
    current_value, free_points = cursor.fetchone()

    if free_points > 0:
        cursor.execute(f"""
            UPDATE users
            SET {stat} = ?, free_points = ?
            WHERE user_id = ?
        """, (current_value + 1, free_points - 1, user_id))
        conn.commit()
        await callback.answer(f"{stat.capitalize()} —É–≤–µ–ª–∏—á–µ–Ω–∞!")
    else:
        await callback.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤!")
    
    conn.close()
    await stats_callback(callback)

@router.callback_query(lambda c: c.data == "random_distribute")
async def random_distribute_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤
    cursor.execute("SELECT free_points FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if not row or row[0] == 0:
        await callback.answer("–ù–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!")
        conn.close()
        return

    points = row[0]
    stat_names = ["strength", "agility", "endurance", "perception", "intelligence", "charisma", "willpower"]
    distribution = {stat: 0 for stat in stat_names}

    for _ in range(points):
        stat = random.choice(stat_names)
        distribution[stat] += 1

    for stat, value in distribution.items():
        if value > 0:
            cursor.execute(f"""
                UPDATE users
                SET {stat} = {stat} + ?, free_points = free_points - ?
                WHERE user_id = ?
            """, (value, value, user_id))

    conn.commit()
    conn.close()

    await callback.answer("–û—á–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º!")
    await stats_callback(callback)